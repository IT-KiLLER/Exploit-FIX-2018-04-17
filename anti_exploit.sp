
/*	Copyright (C) 2018 IT-KiLLER
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include <sdktools>
#include <banning>
#pragma semicolon 1
#pragma newdecls required
#define ANTIEXPLOIT_LOG_PATH "logs/antiexploit"

char exploit_filepath[PLATFORM_MAX_PATH];
float g_fCmdTime[MAXPLAYERS+1] = {0.0, ...};

public Plugin myinfo = 
{
	name = "Exploit FIX: 2018-04-17",
	author = "IT-KiLLER",
	description = "",
	version = "1.0 pre-release",
	url = "https://github.com/IT-KiLLER"
};

public void OnPluginStart()
{
	BuildPath(Path_SM, exploit_filepath, sizeof(exploit_filepath), ANTIEXPLOIT_LOG_PATH);
	if (!DirExists(exploit_filepath))
	{
		CreateDirectory(exploit_filepath, 511);
		
		if (!DirExists(exploit_filepath))
		{
			LogMessage("Failed to create directory at %s - Please manually create that path and reload this plugin.", ANTIEXPLOIT_LOG_PATH);
		}
	}
	BuildPath(Path_SM, exploit_filepath, sizeof(exploit_filepath), "%s/exploit.txt", ANTIEXPLOIT_LOG_PATH);

	AddNormalSoundHook(Hook_AntiHack);
}

public void OnClientDisconnect_Post(int client)
{
	g_fCmdTime[client] = 0.0;
}

public Action Hook_AntiHack(int clients[64], int &numClients, char sample[PLATFORM_MAX_PATH], int &entity, int &channel, float &volume, int &level, int &pitch, int &flags)
{
	if(sample[0] == 'c' && StrEqual(sample, "common\null.wav"))
	{

		if(1 <= entity <= MaxClients)
		{
			int client = entity;
			if(!IsClientInGame(client)) return Plugin_Stop;

			if(g_fCmdTime[client] > GetGameTime()) return Plugin_Stop;

			g_fCmdTime[client] = GetGameTime() + 2.0;

			char Authid[64];
			char FormatedTime[64];
			char IPAddress[64];
			GetClientIP(client, IPAddress, 64);

			Handle handle = OpenFile(exploit_filepath, "a+");
			FormatTime(FormatedTime, 100, "%d_%b_%Y %X", GetTime());
			if(!GetClientAuthId(client, AuthId_Steam2, Authid, sizeof(Authid), false))
			{
				Format(Authid, 64, "Unknown SteamID");
			}
			
			WriteFileLine(handle, "%s - <%N> [%s] <%s> : BANNED", FormatedTime, client, Authid, IPAddress);
			CloseHandle(handle);
			BanIdentity(IPAddress, 0, BANFLAG_IP | BANFLAG_NOKICK, "Tried to exploit.", "sm_antiexploit", 0);
			BanClient(client, 0, BANFLAG_AUTO, "Tried to exploit.", "Tried to exploit.", "sm_antiexploit", 0);
		}
		return Plugin_Stop;
	}
	return Plugin_Continue;
}